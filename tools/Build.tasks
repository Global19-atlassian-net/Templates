<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
    <UsingTask
        TaskName="GetResolvedExternalPackageInfo"
        TaskFactory="CodeTaskFactory"
        AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v4.0.dll" >
        <ParameterGroup>
            <CopyPackagesList ParameterType="System.String" Required="True" />
            <PackageInfo ParameterType="Microsoft.Build.Framework.ITaskItem[]" Output="True" />
        </ParameterGroup>
        <Task>
            <Using Namespace="System" />
            <Using Namespace="System.Collections.Generic" />
            <Using Namespace="System.IO" />
            <Using Namespace="System.Linq" />
            <Using Namespace="Microsoft.Build.Framework" />
            <Using Namespace="Microsoft.Build.Utilities" />
            <Code Type="Fragment" Language="cs">
                <![CDATA[
                try
                {
                    List<ITaskItem> info = new List<ITaskItem>();
                    using (var file = File.OpenText(CopyPackagesList))
                    {
                        while (!file.EndOfStream)
                        {
                            string line = file.ReadLine().Trim();
                            string[] parts = line.Split();
                            var taskItem = new TaskItem(parts[0]);
                            taskItem.SetMetadata("Version", parts[1]);
                            info.Add(taskItem);
                        }
                    }
                    
                    PackageInfo = info.ToArray();
                }
                catch(Exception ex)
                {
                    Log.LogError("Error Generating Package Paths");
                    Log.LogErrorFromException(ex);
                }
                
                return !Log.HasLoggedErrors;
                ]]>
            </Code>
        </Task>
    </UsingTask>   
    <UsingTask
        TaskName="VerifyWhitespace"
        TaskFactory="CodeTaskFactory"
        AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v4.0.dll" >
        <ParameterGroup>
            <FileList ParameterType="Microsoft.Build.Framework.ITaskItem[]" Required="True"/>
        </ParameterGroup>
        <Task>
            <Using Namespace="System" />
            <Using Namespace="System.Collections.Generic" />
            <Using Namespace="System.IO" />
            <Using Namespace="System.Linq" />
            <Using Namespace="Microsoft.Build.Framework" />
            <Using Namespace="Microsoft.Build.Utilities" />
            <Code Type="Fragment" Language="cs">
                <![CDATA[
                try
                {   foreach(var taskItem in FileList)
                    {
                        using(var file = File.OpenText(taskItem.ItemSpec))
                        {
                            int lineNumber = 0;
                            string line = String.Empty;
                            while(!file.EndOfStream)
                            {
                                lineNumber++;
                                line = file.ReadLine();
                                if (!line.TrimEnd().Equals(line))
                                {
                                    Log.LogError("Trailing whitespace found in {0} line {1}, '{2}'", taskItem.ItemSpec, lineNumber, line);
                                }
                                if (line.Contains('\t'))
                                {
                                    Log.LogError("Embedded Tab found in {0} line {1}, '{2}'", taskItem.ItemSpec, lineNumber, line.Replace("\\t", "\\\\t"));
                                }
                            }
                            file.DiscardBufferedData();
                            file.BaseStream.Seek(-3, SeekOrigin.End);
                            if (file.Read() == 10 || file.Read() != 13 || file.Read() != 10)
                            {
                                Log.LogError("Last line in a file must be a non-blank line terminated with \\r\\n: {0} line {1}, '{2}'", taskItem.ItemSpec, lineNumber, line);
                            }
                        }
                    }
                }
                catch(Exception ex)
                {
                    Log.LogError("Error Verifying Whitespace");
                    Log.LogErrorFromException(ex);
                }
                return !Log.HasLoggedErrors;
                ]]>
            </Code>
        </Task>
    </UsingTask>
    <UsingTask
        TaskName="VerifyUsings"
        TaskFactory="CodeTaskFactory"
        AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v4.0.dll" >
        <ParameterGroup>
            <FileList ParameterType="Microsoft.Build.Framework.ITaskItem[]" Required="True"/>
            <RequiredUsings ParameterType="System.String" Required="True"/>
        </ParameterGroup>
        <Task>
            <Using Namespace="System" />
            <Using Namespace="System.Collections.Generic" />
            <Using Namespace="System.IO" />
            <Using Namespace="System.Linq" />
            <Using Namespace="Microsoft.Build.Framework" />
            <Using Namespace="Microsoft.Build.Utilities" />
            <Code Type="Fragment" Language="cs">
                <![CDATA[
                try
                {   foreach(var taskItem in FileList)
                    {
                        String[] reqUsings = RequiredUsings.Split(';');
                    
                        bool[] hasUsing = new bool[reqUsings.Length];
                        using(var file = File.OpenText(taskItem.ItemSpec))
                        {
                            while(!file.EndOfStream)
                            {
                                string line = file.ReadLine();
                                if (line.Contains("{"))
                                {
                                    // continue to the first open brace, then go to the next file.
                                    break;
                                }
                                
                                for(int i=0; i < reqUsings.Length; i++)
                                {
                                    if (line.Contains(String.Format("using {0};", reqUsings[i])))
                                    {
                                        hasUsing[i] = true;
                                    }
                                }
                            }
                            for (int i=0; i < reqUsings.Length; i++)
                            {
                                if (!hasUsing[i]) 
                                {
                                    Log.LogError("File {0} is missing required using statement: {1}", taskItem.ItemSpec, reqUsings[i]);
                                }
                            } 
                        }
                    }
                }
                catch(Exception ex)
                {
                    Log.LogError("Error Verifying Using statements");
                    Log.LogErrorFromException(ex);
                }
                return !Log.HasLoggedErrors;
                ]]>
            </Code>
        </Task>
    </UsingTask>
    <UsingTask
        TaskName="VerifyBOM"
        TaskFactory="CodeTaskFactory"
        AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v4.0.dll" >
        <ParameterGroup>
            <FileList ParameterType="Microsoft.Build.Framework.ITaskItem[]" Required="True"/>
        </ParameterGroup>
        <Task>
            <Using Namespace="System" />
            <Using Namespace="System.Collections.Generic" />
            <Using Namespace="System.IO" />
            <Using Namespace="System.Linq" />
            <Using Namespace="Microsoft.Build.Framework" />
            <Using Namespace="Microsoft.Build.Utilities" />
            <Code Type="Fragment" Language="cs">
                <![CDATA[
                try
                {   
                    foreach(var taskItem in FileList)
                    {
                        bool hasBOM = false;
                        using (var file = new FileStream(taskItem.ItemSpec, FileMode.Open))
                        {
                            if (file.CanSeek)
                            {
                                byte[] bom = new byte[4];
                                file.Read(bom, 0, 4);
                                if (bom[0] == 0xef && bom[1] == 0xbb && bom[2] == 0xbf)
                                {
                                    hasBOM = true;
                                }
                            }
                        }
                        
                        if (!hasBOM)
                        {
                              Log.LogError("File {0} is missing UTF-8 BOM", taskItem.ItemSpec);
                        }
                    }
                }
                catch(Exception ex)
                {
                    Log.LogError("Error Verifying BOM");
                    Log.LogErrorFromException(ex);
                }
                return !Log.HasLoggedErrors;
                ]]>
            </Code>
        </Task>
    </UsingTask>
    <UsingTask TaskName="GenerateSemaphore" TaskFactory="CodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v4.0.dll" >
        <ParameterGroup>
            <TemplateVersion ParameterType="System.String" Required="true" />
            <TemplateDropPath ParameterType="System.String" Required="true" />
            <WebSdkVersion ParameterType="System.String" Required="true" />
            <WebSdkDropPath ParameterType="System.String" Required="true" />
            <CoreSdkVersion ParameterType="System.String" Required="true" />
            <CoreSdkDropPath ParameterType="System.String" Required="true" />
            <CacheVersion ParameterType="System.String" Required="true" />
            <CacheDropPath ParameterType="System.String" Required="true" />
            <ToolsVersion ParameterType="System.String" Required="true" />
            <ToolsDropPath ParameterType="System.String" Required="true" />
            <SemaphoreFilePath ParameterType="System.String" Required="true" />
        </ParameterGroup>
        <Task>
            <Using Namespace="System.IO" />
            <Using Namespace="System.Text" />
            <Code Type="Fragment" Language="cs">
              <![CDATA[
                  var builder = new StringBuilder();
                  builder.AppendLine("[Semaphore]");
                  builder.AppendLine(string.Format("TemplateVersion={0}", TemplateVersion));
                  builder.AppendLine(string.Format("TemplateDropPath={0}", TemplateDropPath));
                  builder.AppendLine(string.Format("CacheVersion={0}", CacheVersion));
                  builder.AppendLine(string.Format("CacheDropPath={0}", CacheDropPath));
                  builder.AppendLine(string.Format("WebSdkVersion={0}", WebSdkVersion));
                  builder.AppendLine(string.Format("WebSdkDropPath={0}", WebSdkDropPath));
                  builder.AppendLine(string.Format("CoreSdkVersion={0}", CoreSdkVersion));
                  builder.AppendLine(string.Format("CoreSdkDropPath={0}", CoreSdkDropPath));
                  builder.AppendLine(string.Format("ToolsVersion={0}", ToolsVersion));
                  builder.AppendLine(string.Format("ToolsDropPath={0}", ToolsDropPath));


                  var retry = 5;
                  while (retry > 0)
                  {
                    try
                    {
                      File.WriteAllText(SemaphoreFilePath, builder.ToString());
                      break;
                    }
                    catch
                    {
                      System.Threading.Thread.Sleep(500);
                      retry--;
                    }
                  }
              ]]>
            </Code>
        </Task>
    </UsingTask>
</Project>